<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:當此屬性設置為true時，配置文件如果發生改變，將會被重新讀取，預設值為true。 
     scanPeriod:設置監測配置文件是否有修改的時間間隔，如果沒有給出時間單位，預設單位是毫秒。當scan為true時，此屬性生效。預設的時間間隔為1分鐘。
     debug:當此屬性設置為true時，將列印出logback內部日誌訊息，實時查看logback運行狀態。預設值為false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<property name="encoding" value="UTF-8" scope="context"/> 
    <!-- 上下文變數設置,用來定義變數值,其中name的值是變數的名稱，value的值時變數定義的值。
        通過<property>定義的值會被插入到logger上下文中。定義變數後，可以使“${}”來使用變數。 -->
    <property name="CONTEXT_NAME" value="logback-test" />
    <property name="logs.dir" value="/home/scotthong/tmp" />

    <!-- 上下文名稱：<contextName>, 每個logger都關聯到logger上下文，
        預設上下文名稱為“default”。但可以使用<contextName>設置成其他名字，用於區分不同應用程序的記錄。
        一旦設置，不能修改。 -->
    <contextName>${CONTEXT_NAME}</contextName>

    <!-- <appender>是<configuration>的子節點，是負責寫日誌的組件。
        有兩個必要屬性name和class。
        name指定appender名稱，
        class指定appender的實現類。 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 對日誌進行格式化。 -->
        <encoder>
             <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS}|%level|%class|%thread|%method|%line|%msg%n
            </pattern>
            <charset>${encoding}</charset>
        </encoder>
    </appender>

    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 被寫入的文件名，可以是相對目錄，也可以是絕對目錄，如果上級目錄不存在會自動建立，沒有預設值。 -->
        <file>${logs.dir}/logback-test.log</file>

        <!-- 當發生滾動時的行為  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <!-- 必須包含“%i”例如，假設最小值和最大值分別為1和2，命名模式為 mylog%i.log,會產生歸檔文件mylog1.log和mylog2.log。還可以指定文件壓縮選項，例如，mylog%i.log.gz 或者 沒有log%i.log.zip -->
            <FileNamePattern>${logs.dir}/logback-test.%i.log</FileNamePattern>
            <!-- 窗口索引最小值 -->
            <minIndex>1</minIndex>
            <!-- 窗口索引最大值 -->
            <maxIndex>1</maxIndex>
        </rollingPolicy>

        <!-- 激活滾動的條件。 -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!-- 活動文件的大小，預設值是10MB -->
            <maxFileSize>30MB</maxFileSize>
        </triggeringPolicy>

        <!-- 對記錄事件進行格式化。 -->
        <encoder>
            <charset>${encoding}</charset>
            <Pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS}|%level|%class|%thread|%method|%line|%msg%n
            </Pattern>
        </encoder>
    </appender>

    <!-- 特殊的<logger>元素，是根logger。只有一個level屬性，應為已經被命名為"root".
        level:設置列印級別，大小寫無關：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能設置為INHERITED或者同義詞NULL。預設是DEBUG。
        <root>可以包含零個或多個<appender-ref>元素，標識這個appender將會添加到這個loger。 -->
    <root>
        <level value="DEBUG" />
        <appender-ref ref="stdout" />
        <appender-ref ref="file" />
    </root>

    <!-- 用來設置某一個 包 或者具體的某一個類 的日誌列印級別、以及指定<appender>, 
        name:用來指定受此logger約束的某一個包或者具體的某一個類。
        level:用來設置列印級別，大小寫無關：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，還有一個特俗值INHERITED或者同義詞NULL，代表強制執行上級的級別。如果未設置此屬性，那么當前loger將會繼承上級的級別。 
        additivity:是否向上級logger傳遞列印訊息。預設是true。(這個logger的上級就是上面的root)
        <logger>可以包含零個或多個<appender-ref>元素，標識這個appender將會添加到這個logger。-->
    <logger name="ratesvr.logback.test" level="DEBUG" additivity="true"></logger>

</configuration>
